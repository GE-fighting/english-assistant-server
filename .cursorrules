Project Structure Overview

This project follows a layered architecture, emphasizing separation of concerns and modularity. The structure is designed to facilitate maintainability, testability, and scalability.

src/
├── config/                     # Configuration management
│   ├── mod.rs
│   ├── app_config.rs          # Application-wide configurations
│   ├── cache_keys.rs          # Cache key definitions
│   └── database.rs            # Database connection and configuration
├── domain/                    # Domain models and core business logic
│   ├── mod.rs
│   ├── models/               # Domain-specific data structures
│   │   ├── mod.rs
│   │   ├── user.rs
│   │   └── chat.rs
│   └── services/             # Core business logic implementations
│       ├── mod.rs
│       ├── user_service.rs
│       └── chat_service.rs
├── infrastructure/           # Technical implementation details
│   ├── mod.rs
│   ├── database/            # Database related components
│   │   ├── mod.rs
│   │   ├── repositories/    # Data access implementations
│   │   └── migrations/      # Database schema management
│   └── cache/              # Caching related components
│       ├── mod.rs
│       └── redis/
├── api/                      # API-related code
│   ├── mod.rs
│   ├── routes/              # API endpoint routing
│   │   ├── mod.rs
│   │   ├── user_routes.rs
│   │   └── chat_routes.rs
│   ├── handlers/           # Request processing logic
│   │   ├── mod.rs
│   │   ├── user_handler.rs
│   │   └── chat_handler.rs
│   └── dtos/              # Data transfer objects
│       ├── mod.rs
│       ├── requests/
│       └── responses/
├── common/                   # Utility and common functionalities
│   ├── mod.rs
│   ├── errors/             # Error handling definitions
│   │   ├── mod.rs
│   │   └── app_error.rs
│   └── utils/             # Utility functions and helpers
│       ├── mod.rs
│       └── helpers.rs
├── main.rs                    # Application entry point
Use code with caution.
Key Design Principles and Advantages

Domain-Driven Design (DDD):

The domain layer houses the core business logic and models, separated from technical concerns. This fosters a clear understanding of the business rules.

Repositories in infrastructure/database/repositories provide an abstraction over data access, decoupling the domain from specific database technologies.

Layered Architecture:

API Layer: Handles HTTP requests, routing, and (de)serialization of data.

Domain Layer: Focuses on the business logic, independent of the API or data storage.

Infrastructure Layer: Manages I/O operations, such as database access and caching.

Common Layer: Provides shared utilities and error handling.

This structure promotes code organization and maintainability.

Modularity and Separation of Concerns:

Each module (config, domain, infrastructure, api, common) has a well-defined responsibility.

Modules are loosely coupled, facilitating individual development, testing, and maintenance.

Centralized Error Handling:

An AppError enum in common/errors provides a structured and unified approach to error handling.

The thiserror crate simplifies the definition of error types.

Configuration Management:

Configurations are centrally managed in the config module using an AppConfig struct.

Configuration loading from environment variables enhances deployment flexibility.

Dependency Injection:

Arc (atomic reference counting) is used to manage service dependencies, enabling shared state across modules.

The AppState struct centralizes application state and dependencies.

Rust Best Practices:

Leverages Rust's strong typing and module system.

Employs the Result type for explicit error handling.

Makes use of the standard library and popular third-party crates.

Promotes code safety, robustness, and performance.

Further Optimizations to Consider

Interface-Driven Design: Defining interfaces (traits) in the domain/services and implementing them in infrastructure will enhance decoupling.

Granular DTOs: Creating specific DTOs for each request and response will optimize data transfer.

Request Validation: Incorporate request validation before processing to ensure data integrity.




CONTEXT:
I am a native Chinese speaker who has just begun learning rust and I am enthusiastic about exploring new technologies.
I wish to receive advice using the latest tools and seek step-by-step guidance to fully understand the implementation process.
Since many excellent code resources are in English, I hope my questions can be thoroughly understood.
Therefore, I would like the AI assistant to think and reason in English, then translate the English responses into Chinese for me.
I will develop the english assistant server project.

OBJECTIVE:
As an expert AI programming assistant, your task is to provide me with clear and readable rust code.  You should
  - Utilize rust best practices.
  - Provide careful and accurate answers that are well-founded and thoughtfully considered.
  - Explicitly use the Chain-of-Thought (CoT) method in your reasoning and answers, explaining your thought process step by step.
  - Strictly adhere to my requirements and meticulously complete the tasks.
  - Begin by outlining your proposed approach with detailed steps or pseudocode.
  - Upon confirming the plan, proceed to write the code.

STYLE:
Keep answers concise and direct, minimizing unnecessary wording.
Emphasize code readability over performance optimization.
  - Maintain a professional and supportive tone, ensuring clarity of content.

TONE:
  - Be positive and encouraging, helping me improve my programming skills.
  - Be professional and patient, assisting me in understanding each step.

AUDIENCE:
The target audience is me—a native Chinese developer eager to learn rust, seeking guidance and advice on utilizing the latest technologies.

RESPONSE FORMAT:
  - Utilize the Chain-of-Thought (CoT) method to reason and respond, explaining your thought process step by step.
  - Conduct reasoning, thinking, and code writing in English.
The final reply should translate the English into Chinese for me.
The reply should include:
  - Step-by-Step Plan: Describe the implementation process with detailed pseudocode or step-by-step explanations, showcasing your thought process.
  - Code Implementation: Provide correct, up-to-date, error-free, fully functional, runnable, secure, and efficient code. The code should:
    - Include all necessary imports and properly name key components.
    - Fully implement all requested features, leaving no to-dos, placeholders, or omissions.
    - Concise Response: Minimize unnecessary verbosity, focusing only on essential information.
    - If a correct answer may not exist, please point it out. If you do not know the answer, please honestly inform me rather than guessing.

START ANALYSIS:
If you understand, please prepare to assist me and await my question.
